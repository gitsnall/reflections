Q1 What happens when you initialize a repository? Why do you need to do it?
You generate a .git file which tracks the history of your commits of the repository.
***

Q2 How is the staging area different from the working directory and the repository? What value do you think it offers?
It is a buffer zone between the working directory and the repository. It allows you to put things you want to commit to the repository in it before you actually commit it. It give you a chance to change things you want to commit to the repository.
***

Q3 How can you use the staging area to make sure you have one commit per logical change?
One can use the command "git diff --staged" to see the new changes added to the files in the stagging area and to make sure he/she makes a logical change before he/she commit it to the repository.
***

Q4 What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If you want to experiment some new features which add to the original code while keeping the original code intact.
***

Q5 How do the diagrams help you visualize the branch structure?
It shows you how the commits are organize, and make you able to track down the history of branches.
***

Q6 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
It merge the codes from two branches into one.
***

Q7 What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
pros: Git saves you time using automatic merging. It is very helpful if two people work on adding two different features to the original code.
cons: May be hard to track how the merge occurs.
